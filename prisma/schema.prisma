generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  student
  teacher
  admin
}

model User {
  id             String            @id @default(cuid())
  name           String?
  email          String            @unique
  password       String
  avatarId       String?
  role           String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  studentProfile StudentProfile?
  achievements   UserAchievement[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudentProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  xpPoints  Int      @default(0)
  user      User     @relation(fields: [userId], references: [id])
}

model Course {
  id          String        @id @default(cuid())
  title       String
  description String
  imageUrl    String?
  price       Float        @default(0)
  published   Boolean      @default(false)
  authorId    String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation("CourseAuthor", fields: [authorId], references: [id])
  enrollments Enrollment[]
  sections    Section[]
  category    Category     @relation(fields: [categoryId], references: [id])
  categoryId  String
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  description String?
  courses     Course[]
}

model Section {
  id        String    @id @default(cuid())
  title     String
  order     Int
  courseId  String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons   Lesson[]
}

model Lesson {
  id          String      @id @default(cuid())
  title       String
  content     String
  order       Int
  sectionId   String
  section     Section     @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  progress    Progress[]
}

model Enrollment {
  id        String      @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  progress  Progress[]
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  course    Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model Progress {
  id           String      @id @default(cuid())
  enrollmentId String
  lessonId     String
  completed    Boolean     @default(false)
  score        Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  enrollment   Enrollment  @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  lesson       Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([enrollmentId, lessonId])
}

model Achievement {
  id          String            @id @default(cuid())
  type        String            @unique
  name        String
  description String
  xpReward    Int
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  unlocks     UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  unlockedAt    DateTime?
  user          User        @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
}
